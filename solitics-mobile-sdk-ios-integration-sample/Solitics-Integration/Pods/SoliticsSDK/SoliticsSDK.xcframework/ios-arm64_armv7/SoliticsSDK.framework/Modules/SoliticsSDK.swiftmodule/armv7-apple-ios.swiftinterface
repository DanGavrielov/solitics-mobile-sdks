// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SoliticsSDK
import CommonCrypto
import Dispatch
import Foundation
import MessageUI
import Network
import SafariServices
@_exported import SoliticsSDK
import Swift
import SystemConfiguration
import UIKit
import WebKit
import os
import zlib
public typealias DataUpdateInfo = [Swift.String : [Swift.String : Any]]
public protocol JSONAble {
  associatedtype ReturnType
  func toJSON() -> [Swift.String : Any]
  static func fromJSON(_ dictionary: [Swift.AnyHashable : Any]) -> Self.ReturnType?
}
public protocol ILoginResult {
  var hashedSubscriberId: Swift.Int { get }
}
@objc public class SOLLoginResult : ObjectiveC.NSObject {
  final public let hashedSubscriberId: Swift.Int
  public init(_ subscriberId: Swift.Int)
  convenience public init(result: SoliticsSDK.ILoginResult)
  @objc override dynamic public init()
  @objc deinit
}
extension SOLLoginResult : SoliticsSDK.ILoginResult {
}
public protocol IAnalyticsEventResult {
}
public typealias VoidClosure = () -> Swift.Void
public typealias TypeClosure<T> = (T) -> Swift.Void
public typealias VoidResultClosure = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
public typealias TypeResultClosure<T> = (Swift.Result<T, Swift.Error>) -> Swift.Void
@objc(SoliticsLogListener) public protocol SoliticsLogListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onLogMessage(_ message: Swift.String)
}
@objc(SoliticsPopupDelegate) public protocol SoliticsPopupDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func soliticsShouldOpenMessage(with content: SoliticsSDK.SOLPopupContent) -> Swift.Bool
  @objc optional func soliticsMessageDidDisplayPopup()
  @objc optional func soliticsMessageDidDismissPopup()
  @objc optional func soliticsMessageDidTrigerAction()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Solitics) open class Solitics : ObjectiveC.NSObject {
  weak public class var delegate: SoliticsSDK.SoliticsPopupDelegate! {
    get
    set
  }
  public class func activate()
  public class var activeGlobalLogs: Swift.Bool {
    get
    set
  }
  public class var activeSocketLogs: Swift.Bool {
    get
    set
  }
  public class var activeRestflLogs: Swift.Bool {
    get
    set
  }
  public class func onLogin(_ loginMetadata: SoliticsSDK.ILoginMetadata, completion: @escaping SoliticsSDK.TypeResultClosure<SoliticsSDK.ILoginResult>)
  public class func onLogout()
  public class func onEmitEvent(txType: Swift.String?, txAmount: Swift.Double?, customFields: Swift.String?, completion: @escaping SoliticsSDK.TypeResultClosure<SoliticsSDK.IEmitEventResult>)
  public class var currentLoginInfo: SoliticsSDK.ILoginMetadata? {
    get
  }
  public class func register(SoliticsLogListener logListener: SoliticsSDK.SoliticsLogListener)
  public class func remove(SoliticsLogListener logListener: SoliticsSDK.SoliticsLogListener)
  @objc deinit
}
public struct SocketDataMessage : Swift.Decodable {
  public var data: Foundation.Data
  public init(from decoder: Swift.Decoder) throws
  public init(data: Foundation.Data)
}
extension SocketDataMessage : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension SocketDataMessage : SoliticsSDK.JSONAble {
  public typealias ReturnType = SoliticsSDK.SocketDataMessage
  public func toJSON() -> [Swift.String : Any]
  public static func fromJSON(_ dictionary: [Swift.AnyHashable : Any]) -> SoliticsSDK.SocketDataMessage?
}
public struct SocketStringMessage : Swift.Decodable {
  public var message: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public init(message: Swift.String)
}
extension SocketStringMessage : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension SocketStringMessage : SoliticsSDK.JSONAble {
  public typealias ReturnType = SoliticsSDK.SocketStringMessage
  public func toJSON() -> [Swift.String : Any]
  public static func fromJSON(_ dictionary: [Swift.AnyHashable : Any]) -> SoliticsSDK.SocketStringMessage?
}
public protocol IEmitEventResult {
  var hashedSubscriberId: Swift.Int { get }
}
public protocol IHeartbeatEventResult {
}
public enum DataUpdateNotification : Swift.String, Swift.CaseIterable {
  case didReceiveSocketString
  case didReceiveSocketData
  case didReceiveSocketError
  case didReceiveSocketPopupMessage
  public static var emptyUpdateInfo: SoliticsSDK.DataUpdateInfo {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SoliticsSDK.DataUpdateNotification]
  public typealias RawValue = Swift.String
  public static var allCases: [SoliticsSDK.DataUpdateNotification] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public class SOLPopupContent : ObjectiveC.NSObject {
  public var messageID: Swift.String
  public var messageHTML: Swift.String
  public var webhookParams: [Swift.String : Any]
  public init(messageID: Swift.String, messageHTML: Swift.String, webhookParams: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
extension SOLPopupContent : SoliticsSDK.IPopupContent {
}
extension SOLPopupContent {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public struct SOLRestRequestLogin {
  public var brand: Swift.String?
  public var branch: Swift.String?
  public var email: Swift.String?
  public var customFields: Swift.String?
  public var keyType: Swift.String?
  public var keyValue: Swift.String?
  public var transactionID: Swift.String?
  public var transactionType: Swift.String?
  public var transactionAmount: Swift.Double?
  public var memberId: Swift.Int?
  public var token: Swift.String?
  public init(brand: Swift.String? = nil, branch: Swift.String? = nil, email: Swift.String? = nil, customFields: Swift.String? = nil, keyType: Swift.String? = nil, keyValue: Swift.String? = nil, transactionAmount: Swift.Double? = nil, memberId: Swift.Int? = nil, token: Swift.String? = nil)
}
extension SOLRestRequestLogin : SoliticsSDK.ILoginMetadata {
}
extension SOLRestRequestLogin : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SOLRestRequestLogin : SoliticsSDK.JSONAble {
  public typealias ReturnType = SoliticsSDK.SOLRestRequestLogin
  public func toJSON() -> [Swift.String : Any]
  public static func fromJSON(_: [Swift.AnyHashable : Any]) -> SoliticsSDK.SOLRestRequestLogin.ReturnType?
}
public protocol UniqueIdentifiable {
  var identifier: Foundation.UUID { get }
}
public struct SOLRestRequestTransaction {
  public var brand: Swift.String?
  public var branch: Swift.String?
  public var email: Swift.String?
  public var customFields: Swift.String?
  public var keyType: Swift.String?
  public var keyValue: Swift.String?
  public var transactionID: Swift.String?
  public var transactionType: Swift.String?
  public var transactionAmount: Swift.Double?
  public var memberId: Swift.Int?
  public var token: Swift.String?
  public init(brand: Swift.String? = nil, branch: Swift.String? = nil, email: Swift.String? = nil, customFields: Swift.String? = nil, keyType: Swift.String? = nil, keyValue: Swift.String? = nil, transactionID: Swift.String? = nil, transactionType: Swift.String? = nil, transactionAmount: Swift.Double? = nil, memberId: Swift.Int? = nil, token: Swift.String? = nil)
}
extension SOLRestRequestTransaction : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SOLRestRequestTransaction : SoliticsSDK.JSONAble {
  public typealias ReturnType = SoliticsSDK.SOLRestRequestTransaction
  public func toJSON() -> [Swift.String : Any]
  public static func fromJSON(_: [Swift.AnyHashable : Any]) -> SoliticsSDK.SOLRestRequestTransaction.ReturnType?
}
@objc public class SOLEmitEventResult : ObjectiveC.NSObject {
  final public let hashedSubscriberId: Swift.Int
  public init(_ subscriberId: Swift.Int)
  convenience public init(result: SoliticsSDK.IEmitEventResult)
  @objc override dynamic public init()
  @objc deinit
}
extension SOLEmitEventResult : SoliticsSDK.IEmitEventResult {
}
extension SOLEmitEventResult : SoliticsSDK.JSONAble {
  public typealias ReturnType = SoliticsSDK.SOLEmitEventResult
  public func toJSON() -> [Swift.String : Any]
  public static func fromJSON(_ dictionary: [Swift.AnyHashable : Any]) -> SoliticsSDK.SOLEmitEventResult.ReturnType?
}
public protocol ILoginMetadata {
  var brand: Swift.String? { get set }
  var branch: Swift.String? { get set }
  var email: Swift.String? { get set }
  var customFields: Swift.String? { get set }
  var keyType: Swift.String? { get set }
  var keyValue: Swift.String? { get set }
  var transactionID: Swift.String? { get set }
  var transactionType: Swift.String? { get set }
  var transactionAmount: Swift.Double? { get set }
  var memberId: Swift.Int? { get set }
  var token: Swift.String? { get set }
}
public protocol IPopupContent {
  var messageID: Swift.String { get }
  var messageHTML: Swift.String { get }
  var webhookParams: [Swift.String : Any] { get }
}
extension SoliticsSDK.DataUpdateNotification : Swift.Equatable {}
extension SoliticsSDK.DataUpdateNotification : Swift.Hashable {}
extension SoliticsSDK.DataUpdateNotification : Swift.RawRepresentable {}
